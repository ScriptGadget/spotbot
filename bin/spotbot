#!/usr/bin/env python
"""
Detect and send price alerts for AWS spot instances.

Retrieves alert subscriptions from redis and scans the requested zones
firing-off any alerts discovered.

This script will normally be run by a cronjob.

"""

import datetime
import copy
from spotbot import subscription
from spotbot import history
from spotbot import alert
from spotbot import slack

def main():
    state_store = subscription.get_state_store()
    subs = copy.deepcopy(subscription.get_subscriptions(state_store))
    last_scan = subscription.get_last_scan(state_store)
    now = datetime.datetime.utcnow()

    if last_scan is None:
        last_scan = now - datetime.timedelta(0, 15*60)


    messages = {}
    for key in subs:
        sub = subs[key]
        prices = history.get_spot_history_from_aws(last_scan, now, sub)
        alert_found = alert.check_for_alert(prices, sub)
        if not alert_found is None:
            message = slack.format_notification(alert_found, sub)

            if messages.has_key(sub['user']):
                messages[sub['user']] = messages[sub['user']] + "\n" + message

            else:
                messages[sub['user']] = message
            subscription.update_subscription_with_last_result(state_store, key, alert_found)

    for user in messages:
        web_hook=subscription.get_web_hook(state_store, user)
        channel=subscription.get_notification_channel(state_store, user)
        slack.send_notification(web_hook=web_hook, message=messages[user], channel=channel)

    subscription.set_last_scan(state_store, now)
    subscription.close_state_store(state_store)

main()

#!/usr/bin/env python
"""
Detect and send price alerts for AWS spot instances.

Retrieves alert subscriptions from redis and scans the requested clouds firing-off any alerts discovered.

This script will normally be run by a cronjob.

"""

import datetime
import json
import boto3
import redis
import requests

def get_spot_prices(StartTime, EndTime, Subscription):
    """ get spot prices. """
    client = boto3.client(
        service_name='ec2',
        region_name=Subscription['region'],
    )

    return client.describe_spot_price_history(
        StartTime=StartTime,
        EndTime=EndTime,
        InstanceTypes=Subscription['instance_types'].split(','),
        ProductDescriptions=Subscription['products'].split(','),
        # AvailabilityZones=Subscription['zones'].split(','),
    )['SpotPriceHistory']

def get_alert_subscriptions(r):
    """ Pulls alert subscriptions from Redis """
    alarms = {}
    cursor = 0
    while True:
        cursor, keys = r.scan(cursor, 'sb:alarm*')
        for key in keys:
            alarms[key] = r.hgetall(key)
        if cursor == 0:
            break
    return alarms

def send_alert_to_slack(WebHook, Channel="#alerts", Username="spotbot", icon_emoji=":space_invader:", Message=":smile: Hello Slack!"):
    """ Send an alert message to a slack webhook. """
    data = {'channel' : Channel, 'username' : Username, 'text' : Message, 'icon_emoji' : icon_emoji}
    requests.post(WebHook, data=json.dumps(data))

def main():
    now = datetime.datetime.utcnow()
    lastScan = now - datetime.timedelta(0, 15*60)

    r = redis.StrictRedis()
    subs = get_alert_subscriptions(r)
    for s in subs:
        sub = subs[s]
        alerts = [x for x in get_spot_prices(lastScan, now, sub) if float(x['SpotPrice']) > float(sub['threshold'])]
        if len(alerts) > 0:
            send_alert_to_slack(WebHook=r.hget('sb:user#' + sub['user'], 'slack_webhook'), Message=":poop: %s 15 minute low of %s greater than %s" %(sub['name'], alerts[0]['SpotPrice'], sub['threshold']));


main()
